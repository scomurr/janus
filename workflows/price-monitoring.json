{
  "name": "Price Monitoring Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "*/15 9-16 * * 1-5"
            }
          ]
        }
      },
      "name": "Price Check Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/portfolio/tickers",
        "options": {}
      },
      "name": "Get Active Tickers",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "functionCode": "// Split tickers for parallel price fetching\nconst tickers = items[0].json.tickers || [];\nconst benchmarks = ['IWO', 'XBI', 'SPY', 'IWM'];\nconst allTickers = [...tickers, ...benchmarks];\n\nreturn allTickers.map(ticker => ({\n  json: { ticker }\n}));"
      },
      "name": "Split Tickers",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "url": "=https://query1.finance.yahoo.com/v8/finance/chart/{{$json.ticker}}",
        "options": {
          "timeout": 10000
        }
      },
      "name": "Fetch Yahoo Finance",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Parse Yahoo Finance response\nconst data = items[0].json;\nconst ticker = $node[\"Split Tickers\"].json.ticker;\n\ntry {\n  const chart = data.chart?.result?.[0];\n  if (!chart) {\n    throw new Error('No chart data');\n  }\n  \n  const meta = chart.meta;\n  const quotes = chart.indicators?.quote?.[0];\n  const adjClose = chart.indicators?.adjclose?.[0]?.adjclose;\n  \n  const timestamps = chart.timestamp || [];\n  const closes = quotes?.close || [];\n  const volumes = quotes?.volume || [];\n  const highs = quotes?.high || [];\n  const lows = quotes?.low || [];\n  const opens = quotes?.open || [];\n  \n  // Get latest data point\n  const latest = timestamps.length - 1;\n  if (latest < 0) {\n    throw new Error('No price data available');\n  }\n  \n  const currentPrice = closes[latest];\n  const volume = volumes[latest];\n  const high = highs[latest];\n  const low = lows[latest];\n  const open = opens[latest];\n  \n  // Calculate percent change\n  let percentChange = 0;\n  if (latest > 0 && closes[latest - 1]) {\n    percentChange = ((currentPrice - closes[latest - 1]) / closes[latest - 1]) * 100;\n  }\n  \n  return [{\n    json: {\n      ticker,\n      currentPrice,\n      open,\n      high,\n      low,\n      volume,\n      percentChange,\n      timestamp: new Date(timestamps[latest] * 1000).toISOString(),\n      source: 'yahoo'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      ticker,\n      error: error.message,\n      currentPrice: null,\n      timestamp: new Date().toISOString(),\n      source: 'yahoo'\n    }\n  }];\n}"
      },
      "name": "Parse Price Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {},
      "name": "Merge Price Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/portfolio",
        "options": {}
      },
      "name": "Get Portfolio Holdings",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "functionCode": "// Check stop-loss conditions\nconst priceData = $node[\"Merge Price Data\"].json;\nconst portfolio = items[0].json.holdings || [];\n\nconst stopLossAlerts = [];\nconst priceMap = {};\n\n// Create price lookup map\npriceData.forEach(item => {\n  if (item.ticker && item.currentPrice) {\n    priceMap[item.ticker] = item;\n  }\n});\n\n// Check each holding for stop-loss triggers\nportfolio.forEach(holding => {\n  const ticker = holding.ticker;\n  const stopLoss = parseFloat(holding.stop_loss) || 0;\n  const shares = parseFloat(holding.shares) || 0;\n  const buyPrice = parseFloat(holding.buy_price) || 0;\n  \n  if (stopLoss > 0 && shares > 0 && priceMap[ticker]) {\n    const currentPrice = priceMap[ticker].currentPrice;\n    \n    if (currentPrice <= stopLoss) {\n      const pnl = (currentPrice - buyPrice) * shares;\n      stopLossAlerts.push({\n        ticker,\n        action: 'STOP_LOSS_TRIGGERED',\n        currentPrice,\n        stopLoss,\n        shares,\n        buyPrice,\n        pnl,\n        timestamp: new Date().toISOString()\n      });\n    }\n  }\n});\n\nreturn [{\n  json: {\n    priceUpdates: priceData,\n    stopLossAlerts,\n    alertCount: stopLossAlerts.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Check Stop Losses",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.alertCount}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ]
        }
      },
      "name": "Has Stop Loss Alerts?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/alerts/stop-loss",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.stopLossAlerts}}",
        "options": {}
      },
      "name": "Trigger Stop Loss Sales",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [2220, 180]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/prices/update",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.priceUpdates}}",
        "options": {}
      },
      "name": "Update Price Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [2220, 420]
    }
  ],
  "connections": {
    "Price Check Schedule": {
      "main": [
        [
          {
            "node": "Get Active Tickers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Active Tickers": {
      "main": [
        [
          {
            "node": "Split Tickers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Tickers": {
      "main": [
        [
          {
            "node": "Fetch Yahoo Finance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Yahoo Finance": {
      "main": [
        [
          {
            "node": "Parse Price Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Price Data": {
      "main": [
        [
          {
            "node": "Merge Price Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Price Data": {
      "main": [
        [
          {
            "node": "Get Portfolio Holdings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Portfolio Holdings": {
      "main": [
        [
          {
            "node": "Check Stop Losses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Stop Losses": {
      "main": [
        [
          {
            "node": "Has Stop Loss Alerts?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Stop Loss Alerts?": {
      "main": [
        [
          {
            "node": "Trigger Stop Loss Sales",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Price Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "timezone": "America/New_York"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "monitoring",
      "name": "monitoring"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}