{
  "name": "Weekly Research Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 8 * * 1"
            }
          ]
        }
      },
      "name": "Weekly Research Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/portfolio/full",
        "options": {}
      },
      "name": "Get Full Portfolio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "functionCode": "// Generate deep research prompt\nconst portfolio = items[0].json;\nconst today = new Date().toISOString().split('T')[0];\n\nconst holdingsText = portfolio.holdings && portfolio.holdings.length > 0\n  ? portfolio.holdings.map(h => \n      `${h.ticker} | ${h.shares} shares | $${h.buy_price} avg | $${h.current_price} current | ${h.pnl > 0 ? '+' : ''}$${h.pnl} P&L`\n    ).join('\\n')\n  : 'No current holdings';\n\nconst prompt = `You are a professional-grade portfolio analyst operating in Deep Research Mode. Your job is to reevaluate the portfolio and produce a complete action plan with exact orders. Optimize risk-adjusted return under strict constraints.\n\nRULES:\n- Budget: $${portfolio.cash || 0} cash + current positions = $${portfolio.total_equity || 0} total equity\n- Universe: US micro-cap stocks only (<$300M market cap)\n- Position limit: Maximum 20% of portfolio in any single stock\n- Execution limits: full shares only. No options, shorting, leverage, margin, or derivatives. Long-only.\n- Stop losses: Required for all new positions at -15% or fundamental level\n\nCURRENT PORTFOLIO (${today}):\n${holdingsText}\n\nCash Available: $${portfolio.cash || 0}\nTotal Equity: $${portfolio.total_equity || 0}\n\nTASKS:\n1. Reevaluate current holdings and consider new candidates\n2. Research micro-cap opportunities with strong fundamentals\n3. Provide specific buy/sell/hold recommendations\n4. Include position sizing and stop-loss levels\n5. Justify each decision with fundamental analysis\n\nRespond with a JSON object in this format:\n{\n  \"research_summary\": \"Market analysis and overall strategy\",\n  \"current_positions\": [\n    {\n      \"ticker\": \"SYMBOL\",\n      \"action\": \"hold|trim|exit\",\n      \"current_conviction\": \"high|medium|low\",\n      \"reasoning\": \"Why keep/trim/exit\",\n      \"target_allocation\": 0.05\n    }\n  ],\n  \"new_opportunities\": [\n    {\n      \"ticker\": \"SYMBOL\",\n      \"thesis\": \"Investment thesis\",\n      \"catalysts\": [\"catalyst1\", \"catalyst2\"],\n      \"target_allocation\": 0.08,\n      \"stop_loss_level\": 0.85,\n      \"conviction\": \"high|medium|low\"\n    }\n  ],\n  \"trades\": [\n    {\n      \"action\": \"buy|sell\",\n      \"ticker\": \"SYMBOL\",\n      \"shares\": 100,\n      \"price_target\": 25.50,\n      \"stop_loss\": 21.68,\n      \"reasoning\": \"Trade rationale\"\n    }\n  ],\n  \"risk_assessment\": \"Overall portfolio risk evaluation\",\n  \"confidence\": 0.8\n}`;\n\nreturn [{\n  json: {\n    prompt,\n    portfolio_data: portfolio,\n    research_type: 'weekly_deep_research'\n  }\n}];"
      },
      "name": "Generate Research Prompt",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "model": "gpt-4",
        "messages": {\n          "chatInput": "={{$json.prompt}}"
        },
        "options": {\n          \"temperature\": 0.2,\n          \"maxTokens\": 2000\n        }
      },
      "name": "Deep Research Analysis",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "functionCode": "// Parse deep research response\nlet response = items[0].json.response || items[0].json.message?.content;\n\ntry {\n  const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    response = jsonMatch[0];\n  }\n  \n  const parsed = JSON.parse(response);\n  \n  return [{\n    json: {\n      research_summary: parsed.research_summary || 'No research summary',\n      current_positions: parsed.current_positions || [],\n      new_opportunities: parsed.new_opportunities || [],\n      trades: parsed.trades || [],\n      risk_assessment: parsed.risk_assessment || 'No risk assessment',\n      confidence: parsed.confidence || 0,\n      raw_response: response,\n      timestamp: new Date().toISOString(),\n      research_type: 'weekly_deep_research'\n    }\n  }];\n} catch (error) {\n  return [{\n    json: {\n      error: `Failed to parse research response: ${error.message}`,\n      raw_response: response,\n      trades: [],\n      timestamp: new Date().toISOString(),\n      research_type: 'weekly_deep_research'\n    }\n  }];\n}"
      },
      "name": "Parse Research Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.error}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isEmpty"
              }
            }
          ]
        }
      },
      "name": "Research Successful?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "functionCode": "// Validate and prioritize trades from research\nconst research = items[0].json;\nconst trades = research.trades || [];\nconst portfolio = $node[\"Generate Research Prompt\"].json.portfolio_data;\n\nlet cash = portfolio.cash || 0;\nconst maxPositionSize = (portfolio.total_equity || 0) * 0.20; // 20% max per position\n\nconst validatedTrades = [];\nconst recommendations = [];\n\n// Process new opportunities\nif (research.new_opportunities) {\n  research.new_opportunities.forEach(opp => {\n    recommendations.push({\n      type: 'NEW_OPPORTUNITY',\n      ticker: opp.ticker,\n      thesis: opp.thesis,\n      conviction: opp.conviction,\n      target_allocation: opp.target_allocation,\n      catalysts: opp.catalysts\n    });\n  });\n}\n\n// Process current position reviews\nif (research.current_positions) {\n  research.current_positions.forEach(pos => {\n    recommendations.push({\n      type: 'POSITION_REVIEW',\n      ticker: pos.ticker,\n      action: pos.action,\n      conviction: pos.current_conviction,\n      reasoning: pos.reasoning,\n      target_allocation: pos.target_allocation\n    });\n  });\n}\n\n// Validate trades\ntrades.forEach(trade => {\n  const action = trade.action?.toLowerCase();\n  const ticker = trade.ticker;\n  const shares = parseFloat(trade.shares) || 0;\n  const priceTarget = parseFloat(trade.price_target) || 0;\n  const stopLoss = parseFloat(trade.stop_loss) || 0;\n  \n  if (action === 'buy' && shares > 0 && priceTarget > 0) {\n    const cost = shares * priceTarget;\n    \n    if (cost <= cash && cost <= maxPositionSize) {\n      validatedTrades.push({\n        action: 'BUY',\n        ticker,\n        shares,\n        price_target: priceTarget,\n        stop_loss: stopLoss,\n        cost,\n        reasoning: trade.reasoning,\n        status: 'APPROVED',\n        priority: research.confidence || 0\n      });\n      cash -= cost;\n    } else {\n      validatedTrades.push({\n        action: 'BUY',\n        ticker,\n        shares,\n        price_target: priceTarget,\n        cost,\n        reasoning: trade.reasoning,\n        status: 'REJECTED',\n        reason: cost > cash ? 'Insufficient cash' : 'Exceeds position limit'\n      });\n    }\n  } else if (action === 'sell' && shares > 0 && priceTarget > 0) {\n    validatedTrades.push({\n      action: 'SELL',\n      ticker,\n      shares,\n      price_target: priceTarget,\n      reasoning: trade.reasoning,\n      status: 'APPROVED'\n    });\n  }\n});\n\nreturn [{\n  json: {\n    research_summary: research.research_summary,\n    recommendations,\n    validated_trades: validatedTrades,\n    risk_assessment: research.risk_assessment,\n    confidence: research.confidence,\n    approved_trades: validatedTrades.filter(t => t.status === 'APPROVED'),\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Validate Research",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1560, 180]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/research/weekly",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "name": "Save Research Report",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [1780, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.approved_trades.length}}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ]
        }
      },
      "name": "Has Approved Trades?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [2000, 180]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/trades/research-based",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json.approved_trades}}",
        "options": {}
      },
      "name": "Queue Research Trades",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [2220, 60]
    },
    {
      "parameters": {
        "functionCode": "// Send research notification\nconst research = items[0].json;\n\nreturn [{\n  json: {\n    message: 'Weekly research completed',\n    summary: research.research_summary,\n    new_opportunities: research.recommendations?.filter(r => r.type === 'NEW_OPPORTUNITY')?.length || 0,\n    position_reviews: research.recommendations?.filter(r => r.type === 'POSITION_REVIEW')?.length || 0,\n    approved_trades: research.approved_trades?.length || 0,\n    confidence: research.confidence,\n    timestamp: research.timestamp\n  }\n}];"
      },
      "name": "Research Complete",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "url": "http://localhost:3000/api/errors/research",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "name": "Log Research Error",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [1560, 420]
    }
  ],
  "connections": {
    "Weekly Research Trigger": {
      "main": [
        [
          {
            "node": "Get Full Portfolio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Full Portfolio": {
      "main": [
        [
          {
            "node": "Generate Research Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Research Prompt": {
      "main": [
        [
          {
            "node": "Deep Research Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Deep Research Analysis": {
      "main": [
        [
          {
            "node": "Parse Research Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Research Response": {
      "main": [
        [
          {
            "node": "Research Successful?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Research Successful?": {
      "main": [
        [
          {
            "node": "Validate Research",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Research Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Research": {
      "main": [
        [
          {
            "node": "Save Research Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Research Report": {
      "main": [
        [
          {
            "node": "Has Approved Trades?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Approved Trades?": {
      "main": [
        [
          {
            "node": "Queue Research Trades",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Research Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "timezone": "America/New_York"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "research",
      "name": "research"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}