{
  "name": "00 - Manual Get Pricing for Specific Day",
  "nodes": [
    {
      "parameters": {
        "url": "=http://marketcap-api:5000/historical-prices?symbols={{$json.symbols}}&date=2025-09-09",
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        832,
        -48
      ],
      "id": "0d369044-81d3-4c6b-9b09-995dad49d598",
      "name": "Fetch Historical Prices from Python"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        160,
        -48
      ],
      "id": "43d255fb-948b-40d4-ba97-e08a9e808366",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT DISTINCT symbol FROM ticker_buys WHERE symbol NOT IN ('USDD', 'USDW', 'USDH') ORDER BY symbol;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        384,
        -48
      ],
      "id": "bf8c973e-e1fb-410e-b4ee-b16bfc8da631",
      "name": "Get Active Tickers",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Collect all symbols from the input items\nconst symbols = items.map(item => item.json.symbol);\nconst targetDate = $('Set Date and Price Type').first().json.target_date;\n\n// Create a single request with all symbols\nreturn [{\n  json: {\n    symbols: symbols.join(','),\n    date: targetDate\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        -48
      ],
      "id": "c663b779-6e32-48dd-8816-52a1dfe5c7b7",
      "name": "Prepare Symbols Request"
    },
    {
      "parameters": {
        "jsCode": "const targetDate = $('Set Date and Price Type').first().json.target_date;\nconst priceType = $('Set Date and Price Type').first().json.price_type;\n\nconst results = [];\n\n// The Python API returns all symbols in a single response\nconst pythonData = items[0].json;\n\nif (!pythonData || pythonData.error) {\n  console.log('Error from Python API:', pythonData?.error || 'No data received');\n  return [];\n}\n\n// Process each symbol from the Python API response\nObject.keys(pythonData).forEach(symbol => {\n  if (symbol === 'error') return; // Skip error field if present\n  \n  const symbolData = pythonData[symbol];\n  \n  const priceData = {\n    symbol: symbol,\n    date: symbolData.actual_date || targetDate,\n    price_open: symbolData.open || null,\n    price_close: symbolData.close || null,\n    price_high: symbolData.high || null,\n    price_one_hr_after_open: symbolData.one_hr_after_open || null,\n    price_low: symbolData.low || null,\n    volume: symbolData.volume || null,\n    price_type: priceType,\n    fetched_at: new Date().toISOString()\n  };\n  \n  results.push({ json: priceData });\n});\n\nconsole.log(`Processed ${results.length} price records for ${targetDate}`);\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1056,
        -48
      ],
      "id": "f219d7b9-0790-4b87-91eb-1440362c3241",
      "name": "Process Price Data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO daily_prices (symbol, date, price_open, price_1hr_after_open, price_close, created_at)\nVALUES (\n  '{{ $json.symbol }}',\n  '{{ $json.date }}',\n  {{ $json.price_open ?? 'NULL' }},\n  {{ $json.price_one_hr_after_open ?? 'NULL' }},\n  {{ $json.price_close ?? 'NULL' }},\n  NOW()\n)\nON CONFLICT (symbol, date)\nDO UPDATE SET\n  price_open = CASE \n    WHEN '{{ $('Set Date and Price Type').first().json.price_type }}' IN ('open', 'all') \n    THEN {{ $json.price_open ?? 'EXCLUDED.price_open' }}\n    ELSE daily_prices.price_open\n  END,\n  price_close = CASE \n    WHEN '{{ $('Set Date and Price Type').first().json.price_type }}' IN ('close', 'all') \n    THEN {{ $json.price_close ?? 'EXCLUDED.price_close' }}\n    ELSE daily_prices.price_close\n  END;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1280,
        -48
      ],
      "id": "6fc907eb-2a75-45c4-89d0-c56b419efb90",
      "name": "Upsert Price Data",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "just hardcode the date you want to refresh in the python node here"
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        784,
        176
      ],
      "typeVersion": 1,
      "id": "46be4d3e-e9b0-446d-8332-978e2992654d",
      "name": "Sticky Note"
    }
  ],
  "pinData": {},
  "connections": {
    "Fetch Historical Prices from Python": {
      "main": [
        [
          {
            "node": "Process Price Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get Active Tickers",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Active Tickers": {
      "main": [
        [
          {
            "node": "Prepare Symbols Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Symbols Request": {
      "main": [
        [
          {
            "node": "Fetch Historical Prices from Python",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Price Data": {
      "main": [
        [
          {
            "node": "Upsert Price Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert Price Data": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0ef2c8e8-e300-4b8c-9600-66e6b276d9b0",
  "meta": {
    "instanceId": "f789c2c474c97ef5e4de040eeaabbf0c6fb8405fe1c6683d5ae6768188a5df19"
  },
  "id": "R64C7UnB1Rg1SpPh",
  "tags": []
}