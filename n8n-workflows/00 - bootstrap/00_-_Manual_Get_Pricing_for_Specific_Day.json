[{"createdAt":"2025-09-10T13:52:46.398Z","updatedAt":"2025-09-16T21:42:52.000Z","id":"R64C7UnB1Rg1SpPh","name":"00 - Manual Get Pricing for Specific Day","active":false,"isArchived":false,"nodes":[{"parameters":{"url":"=http://marketcap-api:5000/historical-prices?symbols={{$json.symbols}}&date={{$json.date}}","options":{"timeout":30000}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1056,-48],"id":"0d369044-81d3-4c6b-9b09-995dad49d598","name":"Fetch Historical Prices from Python"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[160,-48],"id":"43d255fb-948b-40d4-ba97-e08a9e808366","name":"When clicking ‘Execute workflow’"},{"parameters":{"jsCode":"// Collect all symbols from the input items\nconst symbols = items.map(item => item.json.symbol);\nconst targetDate = $('Set Date').first().json.date;\n\n// Create a single request with all symbols\nreturn [{\n  json: {\n    symbols: symbols.join(','),\n    date: targetDate\n  }\n}];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[832,-48],"id":"c663b779-6e32-48dd-8816-52a1dfe5c7b7","name":"Prepare Symbols Request"},{"parameters":{"jsCode":"const targetDate = $input.first().json.CHRS.actual_date\nconst priceType = $('Set Date').first().json.priceType\n\nconst results = [];\n\n// The Python API returns all symbols in a single response\nconst pythonData = items[0].json;\n\nif (!pythonData || pythonData.error) {\n  console.log('Error from Python API:', pythonData?.error || 'No data received');\n  return [];\n}\n\n// Process each symbol from the Python API response\nObject.keys(pythonData).forEach(symbol => {\n  if (symbol === 'error') return; // Skip error field if present\n  \n  const symbolData = pythonData[symbol];\n  \n  const priceData = {\n    symbol: symbol,\n    date: symbolData.actual_date || targetDate,\n    price_open: symbolData.open || null,\n    price_close: symbolData.close || null,\n    price_high: symbolData.high || null,\n    price_one_hr_after_open: symbolData.one_hr_after_open || null,\n    price_low: symbolData.low || null,\n    volume: symbolData.volume || null,\n    price_type: priceType,\n    fetched_at: new Date().toISOString()\n  };\n  \n  results.push({ json: priceData });\n});\n\nconsole.log(`Processed ${results.length} price records for ${targetDate}`);\nreturn results;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1280,-48],"id":"f219d7b9-0790-4b87-91eb-1440362c3241","name":"Process Price Data"},{"parameters":{"operation":"executeQuery","query":"INSERT INTO daily_prices (symbol, date, price_open, price_1hr_after_open, price_close, created_at)\nVALUES (\n  '{{ $json.symbol }}',\n  '{{ $json.date }}',\n  {{ $json.price_open ?? 'NULL' }},\n  {{ $json.price_one_hr_after_open ?? 'NULL' }},\n  {{ $json.price_close ?? 'NULL' }},\n  NOW()\n)\nON CONFLICT (symbol, date)\nDO UPDATE SET\n  price_open = CASE \n    WHEN '{{ $('Set Date').first().json.priceType }}' IN ('open', 'all') \n    THEN {{ $json.price_open ?? 'EXCLUDED.price_open' }}\n    ELSE daily_prices.price_open\n  END,\n  price_close = CASE \n    WHEN '{{ $('Set Date').first().json.priceType }}' IN ('close', 'all') \n    THEN {{ $json.price_close ?? 'EXCLUDED.price_close' }}\n    ELSE daily_prices.price_close\n  END;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1504,-48],"id":"6fc907eb-2a75-45c4-89d0-c56b419efb90","name":"Upsert Price Data","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"content":"just hardcode the date you want to refresh in the python node here"},"type":"n8n-nodes-base.stickyNote","position":[784,176],"typeVersion":1,"id":"46be4d3e-e9b0-446d-8332-978e2992654d","name":"Sticky Note"},{"parameters":{"operation":"executeQuery","query":"SELECT symbol FROM daily_prices WHERE date = '{{ $json.date }}'::date ORDER BY symbol;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[608,-48],"id":"17527674-54a9-4d95-af27-5e970e2d6fe2","name":"Get Closing Tickers","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"assignments":{"assignments":[{"id":"50a623a5-105d-4ad2-9f17-159b75782bb6","name":"date","value":"=2025-09-15","type":"string"},{"id":"ead0fec8-2bad-4bbc-ac3e-82704717b10b","name":"priceType","value":"close","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[384,-48],"id":"5b500d60-27e4-4445-9eb7-8850ac0d6242","name":"Set Date"}],"connections":{"Fetch Historical Prices from Python":{"main":[[{"node":"Process Price Data","type":"main","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Set Date","type":"main","index":0}]]},"Prepare Symbols Request":{"main":[[{"node":"Fetch Historical Prices from Python","type":"main","index":0}]]},"Process Price Data":{"main":[[{"node":"Upsert Price Data","type":"main","index":0}]]},"Upsert Price Data":{"main":[[]]},"Set Date":{"main":[[{"node":"Get Closing Tickers","type":"main","index":0}]]},"Get Closing Tickers":{"main":[[{"node":"Prepare Symbols Request","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"00d54ee3-e7fe-4e22-a73c-6f1124a3204c","triggerCount":0,"tags":[{"createdAt":"2025-09-04T15:23:38.975Z","updatedAt":"2025-09-04T15:23:38.975Z","id":"yQaAGmyd3yVCL790","name":"janus"}],"shared":[{"createdAt":"2025-09-10T13:52:46.402Z","updatedAt":"2025-09-10T13:52:46.402Z","role":"workflow:owner","workflowId":"R64C7UnB1Rg1SpPh","projectId":"33RSXH6V1FUTQaMQ","project":{"createdAt":"2025-08-29T14:57:46.722Z","updatedAt":"2025-08-29T15:00:17.904Z","id":"33RSXH6V1FUTQaMQ","name":"Scott Murray <scomurr@scomurr.com>","type":"personal","icon":null,"description":null}}]}]