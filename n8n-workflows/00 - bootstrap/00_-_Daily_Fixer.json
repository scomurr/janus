[{"createdAt":"2025-09-10T14:51:19.329Z","updatedAt":"2025-09-10T20:19:06.000Z","id":"apY3GbY65prehTe2","name":"00 - Daily Fixer","active":false,"isArchived":false,"nodes":[{"parameters":{"operation":"executeQuery","query":"SELECT \n  COALESCE(shares_bought, 0) - COALESCE(shares_sold, 0) AS current_portfolio_value\nFROM daily_positions\nWHERE symbol = 'USDD'\n  AND date < CAST('{{$json.date}}' AS date)\nORDER BY date DESC, updated_at DESC\nLIMIT 1;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[48,-32],"id":"95ab55ef-e5af-4db6-9220-d6d9070dcda4","name":"Get USDD Cash Available","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT symbol, conviction\nFROM ticker_buys\nWHERE trade_date = '{{ $('Set Date').item.json.date }}'\nORDER BY symbol;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[272,-32],"id":"44b40f46-66ef-4cc9-b9fc-007ec8afb3c7","name":"Get Latest Conviction Scores","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"jsCode":"const availableCash = $('Get USDD Cash Available').first().json.current_portfolio_value;\nconst tickers = $('Get Latest Conviction Scores').all();\n\n// Calculate total conviction (excluding USDD)\nconst totalConviction = tickers.reduce((sum, ticker) => {\n  return sum + ticker.json.conviction;\n}, 0);\n\nif (totalConviction === 0) {\n  return [];\n}\n\n// Calculate allocations\nreturn tickers.map(ticker => ({\n  json: {\n    symbol: ticker.json.symbol,\n    conviction: ticker.json.conviction,\n    allocation_usd: Math.round((ticker.json.conviction / totalConviction) * availableCash * 100) / 100\n  }\n}));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[496,-32],"id":"f6805b57-6d6d-4c8f-aeb1-0f030a45eb7e","name":"Calculate Position Sizes"},{"parameters":{"jsCode":"// Get date passed in from \"Set Date\" node\nconst tradeDate = $('Set Date').first().json.date;\nconst availableCash = $('Get USDD Cash Available').first().json.current_portfolio_value;\nlet totalSpent = 0;\n\nconst results = items.map(item => {\n  const shares = Math.floor(item.json.allocation_usd / item.json.price_open * 10000) / 10000;\n  const actualSpent = shares * item.json.price_open;\n  totalSpent += actualSpent;\n  \n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: tradeDate,\n      shares_bought: shares\n    }\n  };\n});\n\n// Add USDD record showing remaining cash (should be ~$0)\nconst remainingCash = availableCash - totalSpent;\nresults.push({\n  json: {\n    symbol: 'USDD',\n    date: tradeDate,\n    shares_bought: remainingCash\n  }\n});\n\nreturn results;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[944,-32],"id":"192824f3-2865-4908-b7dc-0fb93090e502","name":"Calculate Shares to Buy"},{"parameters":{"operation":"executeQuery","query":"INSERT INTO daily_positions (symbol, date, shares_bought)\nVALUES ('{{ $json.symbol }}', '{{ $json.date }}', {{ $json.shares_bought }})\nON CONFLICT (symbol, date)\nDO UPDATE SET shares_bought = EXCLUDED.shares_bought, updated_at = CURRENT_TIMESTAMP;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1168,-32],"id":"c4789abe-5558-4f84-9c52-8dea067714fb","name":"Record Morning Buys","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-176,192],"id":"a970aff5-5b62-4b2c-aa3b-24057ccb07ea","name":"When clicking ‘Execute workflow’"},{"parameters":{"assignments":{"assignments":[{"id":"50a623a5-105d-4ad2-9f17-159b75782bb6","name":"date","value":"={{ $today.toFormat('yyyy-MM-dd') }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-176,-32],"id":"5f82fb4c-6b77-45af-bd9e-eebe92d4ab47","name":"Set Date"},{"parameters":{"operation":"executeQuery","query":"SELECT \n  '{{ $json.symbol }}' AS symbol,\n  {{ $json.allocation_usd }} AS allocation_usd,\n  dp.price_open\nFROM daily_prices dp\nWHERE dp.symbol = '{{ $json.symbol }}'\n  AND dp.date = '{{ $(\"Set Date\").item.json.date }}'::date;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[720,-32],"id":"3e4944a2-d610-44f6-8d38-cec1bf07dd38","name":"Get Specified Date's Open Prices","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  dp_pos.symbol,\n  dp_pos.shares_bought,\n  dp_prices.price_open,\n  dp_prices.price_close\nFROM daily_positions dp_pos\nJOIN daily_prices dp_prices \n  ON dp_pos.symbol = dp_prices.symbol\n AND dp_pos.date = dp_prices.date\nWHERE dp_pos.date = '{{ $json.date }}'::date\n  AND dp_pos.shares_bought > 0;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[288,192],"id":"deb1cd43-e347-4937-8fec-add0e8631db5","name":"Get Today's Positions","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"jsCode":"// Use date passed from Set Date node\nconst tradeDate = $('Set Date1').first().json.date;\nlet totalCashFromSales = 0;\n\nconst results = items.map(item => {\n  const sharesSold = item.json.shares_bought;\n  const saleAmount = sharesSold * item.json.price_close;\n  totalCashFromSales += saleAmount;\n  \n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: tradeDate,\n      shares_sold: sharesSold,\n      shares_bought: 0\n    }\n  };\n});\n\n// Update USDD to reflect cash from sales\nresults.push({\n  json: {\n    symbol: 'USDD',\n    date: tradeDate,\n    shares_bought: totalCashFromSales,\n    shares_sold: 0\n  }\n});\n\nreturn results;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[560,192],"id":"d1310021-a6af-4e2a-a3a9-5b79113c43e2","name":"Calculate End of Day Sales"},{"parameters":{"operation":"executeQuery","query":"UPDATE daily_positions\nSET\n  shares_bought = CASE \n    WHEN '{{ $json.symbol }}' = 'USDD' THEN {{ $json.shares_bought }}\n    ELSE COALESCE({{ $json.shares_bought }}, daily_positions.shares_bought)\n  END,\n  shares_sold = COALESCE({{ $json.shares_sold }}, daily_positions.shares_sold),\n  updated_at = CURRENT_TIMESTAMP\nWHERE symbol = '{{ $json.symbol }}'\n  AND date = '{{ $json.date }}'::date;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[832,192],"id":"2dce5f16-9df9-4d28-ba5a-d4f9636ac0f2","name":"Record End of Day","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"assignments":{"assignments":[{"id":"50a623a5-105d-4ad2-9f17-159b75782bb6","name":"date","value":"2025-09-09","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[48,192],"id":"60f04080-f0cb-42dc-bc7a-2ecc97cc6b44","name":"Set Date1"}],"connections":{"Get USDD Cash Available":{"main":[[{"node":"Get Latest Conviction Scores","type":"main","index":0}]]},"Get Latest Conviction Scores":{"main":[[{"node":"Calculate Position Sizes","type":"main","index":0}]]},"Calculate Position Sizes":{"main":[[{"node":"Get Specified Date's Open Prices","type":"main","index":0}]]},"Calculate Shares to Buy":{"main":[[{"node":"Record Morning Buys","type":"main","index":0}]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Set Date","type":"main","index":0}]]},"Set Date":{"main":[[{"node":"Get USDD Cash Available","type":"main","index":0}]]},"Get Specified Date's Open Prices":{"main":[[{"node":"Calculate Shares to Buy","type":"main","index":0}]]},"Get Today's Positions":{"main":[[{"node":"Calculate End of Day Sales","type":"main","index":0}]]},"Calculate End of Day Sales":{"main":[[{"node":"Record End of Day","type":"main","index":0}]]},"Set Date1":{"main":[[{"node":"Get Today's Positions","type":"main","index":0}]]},"Record Morning Buys":{"main":[[]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"42832c55-6564-4550-ac19-9432ae581acc","triggerCount":0,"tags":[{"createdAt":"2025-09-04T15:23:38.975Z","updatedAt":"2025-09-04T15:23:38.975Z","id":"yQaAGmyd3yVCL790","name":"janus"}],"shared":[{"createdAt":"2025-09-10T14:51:19.334Z","updatedAt":"2025-09-10T14:51:19.334Z","role":"workflow:owner","workflowId":"apY3GbY65prehTe2","projectId":"33RSXH6V1FUTQaMQ","project":{"createdAt":"2025-08-29T14:57:46.722Z","updatedAt":"2025-08-29T15:00:17.904Z","id":"33RSXH6V1FUTQaMQ","name":"Scott Murray <scomurr@scomurr.com>","type":"personal","icon":null,"description":null}}]}]