[{"createdAt":"2025-09-09T17:50:44.434Z","updatedAt":"2025-09-11T15:25:09.000Z","id":"bavup0dBy4JEMs82","name":"05b - Daily Strategy","active":true,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"cronExpression","expression":"5 16 * * 1-5"}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[832,240],"id":"dc6f7f15-e097-4a9d-9f29-af3f49bf8193","name":"4:05 PM Central - Market Close"},{"parameters":{"rule":{"interval":[{"field":"cronExpression","expression":"35 9 * * 1-5"}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[832,16],"id":"3d1fb892-ba75-4a44-b708-c8e8d0aa5f74","name":"9:35 AM Central - Market Open"},{"parameters":{"operation":"executeQuery","query":"SELECT \n  COALESCE(shares_bought, 0) - COALESCE(shares_sold, 0) AS current_portfolio_value\nFROM daily_positions\nWHERE symbol = 'USDD'\n  AND date < CAST('{{$json.date}}' AS date)\nORDER BY date DESC, updated_at DESC\nLIMIT 1;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1280,16],"id":"6d939417-755c-4f97-9a62-f3e4b1e986f1","name":"Get USDD Cash Available","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT symbol, conviction\nFROM ticker_buys\nWHERE trade_date = '{{ $('Set Date').item.json.date }}'\nORDER BY symbol;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1504,16],"id":"da416ef8-a330-4e1b-bad0-01a735ef049c","name":"Get Latest Conviction Scores","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"jsCode":"const availableCash = $('Get USDD Cash Available').first().json.current_portfolio_value;\nconst tickers = $('Get Latest Conviction Scores').all();\n\n// Calculate total conviction (excluding USDD)\nconst totalConviction = tickers.reduce((sum, ticker) => {\n  return sum + ticker.json.conviction;\n}, 0);\n\nif (totalConviction === 0) {\n  return [];\n}\n\n// Calculate allocations\nreturn tickers.map(ticker => ({\n  json: {\n    symbol: ticker.json.symbol,\n    conviction: ticker.json.conviction,\n    allocation_usd: Math.round((ticker.json.conviction / totalConviction) * availableCash * 100) / 100\n  }\n}));"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1728,16],"id":"cfdcdf2c-190f-4239-9ebf-2ac5bed94a7e","name":"Calculate Position Sizes"},{"parameters":{"jsCode":"// Get date passed in from \"Set Date\" node\nconst tradeDate = $('Set Date').first().json.date;\nconst availableCash = $('Get USDD Cash Available').first().json.current_portfolio_value;\nlet totalSpent = 0;\n\nconst results = items.map(item => {\n  const shares = Math.floor(item.json.allocation_usd / item.json.price_open * 10000) / 10000;\n  const actualSpent = shares * item.json.price_open;\n  totalSpent += actualSpent;\n  \n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: tradeDate,\n      shares_bought: shares\n    }\n  };\n});\n\n// Add USDD record showing remaining cash (should be ~$0)\nconst remainingCash = availableCash - totalSpent;\nresults.push({\n  json: {\n    symbol: 'USDD',\n    date: tradeDate,\n    shares_bought: remainingCash\n  }\n});\n\nreturn results;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[2176,16],"id":"26677c3b-c6da-4d1e-bf58-8f070161140b","name":"Calculate Shares to Buy"},{"parameters":{"operation":"executeQuery","query":"INSERT INTO daily_positions (symbol, date, shares_bought)\nVALUES ('{{ $json.symbol }}', '{{ $json.date }}', {{ $json.shares_bought }})\nON CONFLICT (symbol, date)\nDO UPDATE SET shares_bought = EXCLUDED.shares_bought, updated_at = CURRENT_TIMESTAMP;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2400,16],"id":"adcfd418-93bb-4ff2-b3a4-0932ed3cd0d7","name":"Record Morning Buys","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"assignments":{"assignments":[{"id":"50a623a5-105d-4ad2-9f17-159b75782bb6","name":"date","value":"={{ $today.toFormat('yyyy-MM-dd') }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1056,16],"id":"5bf546dc-8e43-443d-a6d5-4d5d710e96f0","name":"Set Date"},{"parameters":{"operation":"executeQuery","query":"SELECT \n  '{{ $json.symbol }}' AS symbol,\n  {{ $json.allocation_usd }} AS allocation_usd,\n  dp.price_open\nFROM daily_prices dp\nWHERE dp.symbol = '{{ $json.symbol }}'\n  AND dp.date = '{{ $(\"Set Date\").item.json.date }}'::date;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1952,16],"id":"78574bfa-0c96-4e73-9403-13c1a9df7590","name":"Get Specified Date's Open Prices","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"operation":"executeQuery","query":"SELECT \n  dp_pos.symbol,\n  dp_pos.shares_bought,\n  dp_prices.price_open,\n  dp_prices.price_close\nFROM daily_positions dp_pos\nJOIN daily_prices dp_prices \n  ON dp_pos.symbol = dp_prices.symbol\n AND dp_pos.date = dp_prices.date\nWHERE dp_pos.date = '{{ $json.date }}'::date\n  AND dp_pos.shares_bought > 0;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1280,240],"id":"2fc453d7-6a48-46b6-964c-999e617301b3","name":"Get Today's Positions","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"jsCode":"// Use date passed from Set Date node\nconst tradeDate = $('Set Date1').first().json.date;\nlet totalCashFromSales = 0;\n\nconst results = items.map(item => {\n  const sharesSold = item.json.shares_bought;\n  const saleAmount = sharesSold * item.json.price_close;\n  totalCashFromSales += saleAmount;\n  \n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: tradeDate,\n      shares_sold: sharesSold,\n      shares_bought: 0\n    }\n  };\n});\n\n// Update USDD to reflect cash from sales\nresults.push({\n  json: {\n    symbol: 'USDD',\n    date: tradeDate,\n    shares_bought: totalCashFromSales,\n    shares_sold: 0\n  }\n});\n\nreturn results;\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1504,240],"id":"4c4e40ae-18fa-46e4-bbd2-1ce78b7c7c1d","name":"Calculate End of Day Sales"},{"parameters":{"operation":"executeQuery","query":"UPDATE daily_positions\nSET\n  shares_bought = CASE \n    WHEN '{{ $json.symbol }}' = 'USDD' THEN {{ $json.shares_bought }}\n    ELSE COALESCE({{ $json.shares_bought }}, daily_positions.shares_bought)\n  END,\n  shares_sold = COALESCE({{ $json.shares_sold }}, daily_positions.shares_sold),\n  updated_at = CURRENT_TIMESTAMP\nWHERE symbol = '{{ $json.symbol }}'\n  AND date = '{{ $json.date }}'::date;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1728,240],"id":"c451f043-e293-4578-8f9b-fdebce63165a","name":"Record End of Day","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"assignments":{"assignments":[{"id":"50a623a5-105d-4ad2-9f17-159b75782bb6","name":"date","value":"={{ $today.toFormat('yyyy-MM-dd') }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1056,240],"id":"32323f0e-03fc-4ac5-a082-686ed63a13f3","name":"Set Date1"},{"parameters":{},"type":"n8n-nodes-base.errorTrigger","typeVersion":1,"position":[1520,-192],"id":"380ec9e9-2308-4af2-b203-ae9e2de91d75","name":"Error Trigger"},{"parameters":{"authentication":"webhook","content":"=Error:  {{ $json.execution.error.message }}\nWorkflow: {{ $workflow.name }}\nCheck N8N","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[1744,-192],"id":"e5952fb7-b053-46bd-bd15-c651ba642a56","name":"Discord1","webhookId":"ca20c902-d9f2-42e0-903e-8403d43611f1","credentials":{"discordWebhookApi":{"id":"hXnySa96N3aNgiBT","name":"Janus Errors Webhook"}}},{"parameters":{"authentication":"webhook","content":"=Workflow started:  {{ $workflow.name }}","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[1056,-192],"id":"fae6bd19-73d7-4419-af5b-baa37dd021ff","name":"Workflow Started","webhookId":"1103af16-40f1-459b-8d6c-37a2f4a0254e","credentials":{"discordWebhookApi":{"id":"hXnySa96N3aNgiBT","name":"Janus Errors Webhook"}}},{"parameters":{"authentication":"webhook","content":"=Workflow completed:  {{ $workflow.name }}","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[2608,16],"id":"8ac5db2e-e51c-43b8-bdfa-cbeaa9caa617","name":"Workflow Completed","webhookId":"1103af16-40f1-459b-8d6c-37a2f4a0254e","credentials":{"discordWebhookApi":{"id":"hXnySa96N3aNgiBT","name":"Janus Errors Webhook"}}},{"parameters":{"authentication":"webhook","content":"=Workflow completed:  {{ $workflow.name }}","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[1952,240],"id":"5e89a413-393c-42c4-a944-1584abde11fc","name":"Workflow Close Completed","webhookId":"1103af16-40f1-459b-8d6c-37a2f4a0254e","credentials":{"discordWebhookApi":{"id":"hXnySa96N3aNgiBT","name":"Janus Errors Webhook"}}}],"connections":{"4:05 PM Central - Market Close":{"main":[[{"node":"Set Date1","type":"main","index":0},{"node":"Workflow Started","type":"main","index":0}]]},"9:35 AM Central - Market Open":{"main":[[{"node":"Set Date","type":"main","index":0},{"node":"Workflow Started","type":"main","index":0}]]},"Get USDD Cash Available":{"main":[[{"node":"Get Latest Conviction Scores","type":"main","index":0}]]},"Get Latest Conviction Scores":{"main":[[{"node":"Calculate Position Sizes","type":"main","index":0}]]},"Calculate Position Sizes":{"main":[[{"node":"Get Specified Date's Open Prices","type":"main","index":0}]]},"Calculate Shares to Buy":{"main":[[{"node":"Record Morning Buys","type":"main","index":0}]]},"Set Date":{"main":[[{"node":"Get USDD Cash Available","type":"main","index":0}]]},"Get Specified Date's Open Prices":{"main":[[{"node":"Calculate Shares to Buy","type":"main","index":0}]]},"Get Today's Positions":{"main":[[{"node":"Calculate End of Day Sales","type":"main","index":0}]]},"Calculate End of Day Sales":{"main":[[{"node":"Record End of Day","type":"main","index":0}]]},"Set Date1":{"main":[[{"node":"Get Today's Positions","type":"main","index":0}]]},"Record Morning Buys":{"main":[[{"node":"Workflow Completed","type":"main","index":0}]]},"Record End of Day":{"main":[[{"node":"Workflow Close Completed","type":"main","index":0}]]},"Error Trigger":{"main":[[{"node":"Discord1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:9 AM Central - Market Open":{"recurrenceRules":[]},"node:4 PM Central - Market Close":{"recurrenceRules":[]},"node:4:05 PM Central - Market Close":{"recurrenceRules":[]},"node:9:35 AM Central - Market Open":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"96a4e027-461e-42a1-ac9c-c5c8edc062af","triggerCount":2,"tags":[{"createdAt":"2025-09-04T15:23:38.975Z","updatedAt":"2025-09-04T15:23:38.975Z","id":"yQaAGmyd3yVCL790","name":"janus"}],"shared":[{"createdAt":"2025-09-09T17:50:44.438Z","updatedAt":"2025-09-09T17:50:44.438Z","role":"workflow:owner","workflowId":"bavup0dBy4JEMs82","projectId":"33RSXH6V1FUTQaMQ","project":{"createdAt":"2025-08-29T14:57:46.722Z","updatedAt":"2025-08-29T15:00:17.904Z","id":"33RSXH6V1FUTQaMQ","name":"Scott Murray <scomurr@scomurr.com>","type":"personal","icon":null,"description":null}}]}]