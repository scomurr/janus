{
  "name": "05 - Execution",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM ticker_buys\nWHERE last_updated >= now() - interval '20 hours';\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        896,
        96
      ],
      "id": "a4bc7909-774b-4468-9be8-c9b52eb0635e",
      "name": "Get Today's Assets",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const budget = 1000;\nconst total = items.reduce((sum, i) => sum + i.json.conviction, 0);\nreturn items.map(i => {\n  const alloc = Math.round((i.json.conviction / total) * budget * 100) / 100;\n  return {\n    json: {\n      ...i.json,\n      allocation_usd: alloc,\n      total_portfolio_value: budget\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        96
      ],
      "id": "de5c0898-becd-47bc-bcc6-4d8eee8e5621",
      "name": "Set Position Size Per Ticker"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO portfolio_positions (\n  timestamp, symbol, allocation_usd, conviction, total_portfolio_value, notes\n) VALUES (\n  NOW(), '{{$json.symbol}}', {{ $json.allocation_usd }}, {{ $json.conviction }}, {{ $json.total_portfolio_value }}, 'daily allocation'\n);\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1312,
        96
      ],
      "id": "564e619e-4b67-49f9-b26a-40168508a90a",
      "name": "Set Portfolio Positions",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS portfolio_positions  (\n  id SERIAL PRIMARY KEY,\n  timestamp TIMESTAMP DEFAULT now(),\n  symbol TEXT NOT NULL,\n  allocation_usd NUMERIC(10,2),\n  conviction INTEGER,\n  total_portfolio_value NUMERIC(10,2),\n  notes TEXT\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        224,
        96
      ],
      "id": "95d15ed2-4f3e-4809-a1c8-cfc27bba61e6",
      "name": "Create portfolio_positions Table if Missing",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "url": "=http://marketcap-api:5000/price?ticker={{ $('Set Position Size Per Ticker').item.json.symbol }}&type=close",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        224,
        352
      ],
      "id": "8f00077b-dc69-4fc3-9846-028b985c6767",
      "name": "YF - Get Price Data"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS daily_valuation (\n  id SERIAL PRIMARY KEY,\n  symbol TEXT NOT NULL,\n  date DATE NOT NULL,\n  allocation_usd NUMERIC(10,2),\n  price_open NUMERIC(10,4),\n  price_close NUMERIC(10,4),\n  quantity_held NUMERIC(18,8),\n  value_close NUMERIC(10,2),\n  profit_loss NUMERIC(10,2)\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        672,
        96
      ],
      "id": "54a8bd8c-8745-4257-a6f2-1b7b006d9c04",
      "name": "Create daily_valuation Table if Missing",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS price_snapshots (\n  id SERIAL PRIMARY KEY,\n  symbol TEXT NOT NULL,\n  price NUMERIC(10, 4) NOT NULL,\n  timestamp TIMESTAMP DEFAULT now()\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        448,
        96
      ],
      "id": "246c4b17-fff8-486c-8905-6271960cbf2c",
      "name": "Create price_snapshots Table if Missing",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO price_snapshots  (\n  symbol, price, timestamp\n) VALUES (\n  '{{ $json.ticker }}',\n  {{ $json.price }},\n  CURRENT_TIMESTAMP\n);\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        432,
        352
      ],
      "id": "4416c2d7-0e0f-4932-b57a-82f9f0fc1c87",
      "name": "Set Daily Price Info",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  p.symbol,\n  p.allocation_usd,\n  p.timestamp::date AS position_date,\n  s.price AS price_close\nFROM (\n  SELECT DISTINCT ON (symbol) *\n  FROM portfolio_positions\n  ORDER BY symbol, timestamp DESC\n) p\nJOIN price_snapshots s\n  ON s.symbol = p.symbol\n  AND s.timestamp::date = CURRENT_DATE\nORDER BY p.symbol;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        224,
        560
      ],
      "id": "26f2970d-8860-4742-840e-198cd16ca862",
      "name": "Get Portfolio Info",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        640,
        352
      ],
      "id": "1055d4c8-688f-4ab9-904b-b8e45c382a00",
      "name": "No Operation, do nothing",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const alloc = item.json.allocation_usd;\n  const price = item.json.price_close;\n  const qty = alloc / price;\n  const value = qty * price;\n  const pnl = value - alloc;\n\n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: new Date().toISOString().split('T')[0],\n      allocation_usd: alloc,\n      price_open: price,      // optional: drop if not using\n      price_close: price,\n      quantity_held: qty,\n      value_close: value,\n      profit_loss: pnl\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        560
      ],
      "id": "2634ff49-7615-4a06-91a3-16730de533d4",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO daily_valuation (\n  symbol,\n  date,\n  allocation_usd,\n  price_open,\n  price_close,\n  quantity_held,\n  value_close,\n  profit_loss\n) VALUES (\n  '{{$json.symbol}}',\n  '{{$json.date}}',\n  {{$json.allocation_usd}},\n  {{$json.price_open}},\n  {{$json.price_close}},\n  {{$json.quantity_held}},\n  {{$json.value_close}},\n  {{$json.profit_loss}}\n);\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        656,
        560
      ],
      "id": "f41123ff-a8af-4006-ad32-03fc5d07624c",
      "name": "Set daily_valuations",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 16 * * 1-5"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        16,
        96
      ],
      "id": "7e7dfa70-b0e4-4392-b7c2-2131a0d51adc",
      "name": "4PM Central"
    }
  ],
  "pinData": {
    "4PM Central": [
      {
        "json": {
          "name": "First item",
          "code": 1
        }
      },
      {
        "json": {
          "name": "Second item",
          "code": 2
        }
      }
    ]
  },
  "connections": {
    "Get Today's Assets": {
      "main": [
        [
          {
            "node": "Set Position Size Per Ticker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Position Size Per Ticker": {
      "main": [
        [
          {
            "node": "Set Portfolio Positions",
            "type": "main",
            "index": 0
          },
          {
            "node": "YF - Get Price Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create portfolio_positions Table if Missing": {
      "main": [
        [
          {
            "node": "Create price_snapshots Table if Missing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Portfolio Positions": {
      "main": [
        []
      ]
    },
    "Create daily_valuation Table if Missing": {
      "main": [
        [
          {
            "node": "Get Today's Assets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create price_snapshots Table if Missing": {
      "main": [
        [
          {
            "node": "Create daily_valuation Table if Missing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YF - Get Price Data": {
      "main": [
        [
          {
            "node": "Set Daily Price Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Daily Price Info": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Get Portfolio Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Portfolio Info": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Set daily_valuations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4PM Central": {
      "main": [
        [
          {
            "node": "Create portfolio_positions Table if Missing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1fd56592-7204-4c9d-b563-cef2f9e3e05e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f789c2c474c97ef5e4de040eeaabbf0c6fb8405fe1c6683d5ae6768188a5df19"
  },
  "id": "RaG0fANfzHQvjUkY",
  "tags": [
    {
      "createdAt": "2025-09-04T15:23:38.975Z",
      "updatedAt": "2025-09-04T15:23:38.975Z",
      "id": "yQaAGmyd3yVCL790",
      "name": "janus"
    }
  ]
}