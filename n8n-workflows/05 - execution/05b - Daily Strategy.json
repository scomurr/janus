{
  "name": "05b - Daily Strategy",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "5 16 * * 1-5"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        832,
        240
      ],
      "id": "dc6f7f15-e097-4a9d-9f29-af3f49bf8193",
      "name": "4:05 PM Central - Market Close"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "35 9 * * 1-5"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        832,
        16
      ],
      "id": "3d1fb892-ba75-4a44-b708-c8e8d0aa5f74",
      "name": "9:35 AM Central - Market Open"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  COALESCE(shares_bought, 0) - COALESCE(shares_sold, 0) AS current_portfolio_value\nFROM daily_positions\nWHERE symbol = 'USDD'\n  AND date < CAST('{{$json.date}}' AS date)\nORDER BY date DESC, updated_at DESC\nLIMIT 1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1280,
        16
      ],
      "id": "6d939417-755c-4f97-9a62-f3e4b1e986f1",
      "name": "Get USDD Cash Available",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT symbol, conviction\nFROM ticker_buys\nWHERE trade_date = '{{ $('Set Date').item.json.date }}'\nORDER BY symbol;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1504,
        16
      ],
      "id": "da416ef8-a330-4e1b-bad0-01a735ef049c",
      "name": "Get Latest Conviction Scores",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const availableCash = $('Get USDD Cash Available').first().json.current_portfolio_value;\nconst tickers = $('Get Latest Conviction Scores').all();\n\n// Calculate total conviction (excluding USDD)\nconst totalConviction = tickers.reduce((sum, ticker) => {\n  return sum + ticker.json.conviction;\n}, 0);\n\nif (totalConviction === 0) {\n  return [];\n}\n\n// Calculate allocations\nreturn tickers.map(ticker => ({\n  json: {\n    symbol: ticker.json.symbol,\n    conviction: ticker.json.conviction,\n    allocation_usd: Math.round((ticker.json.conviction / totalConviction) * availableCash * 100) / 100\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1728,
        16
      ],
      "id": "cfdcdf2c-190f-4239-9ebf-2ac5bed94a7e",
      "name": "Calculate Position Sizes"
    },
    {
      "parameters": {
        "jsCode": "// Get date passed in from \"Set Date\" node\nconst tradeDate = $('Set Date').first().json.date;\nconst availableCash = $('Get USDD Cash Available').first().json.current_portfolio_value;\nlet totalSpent = 0;\n\nconst results = items.map(item => {\n  const shares = Math.floor(item.json.allocation_usd / item.json.price_open * 10000) / 10000;\n  const actualSpent = shares * item.json.price_open;\n  totalSpent += actualSpent;\n  \n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: tradeDate,\n      shares_bought: shares\n    }\n  };\n});\n\n// Add USDD record showing remaining cash (should be ~$0)\nconst remainingCash = availableCash - totalSpent;\nresults.push({\n  json: {\n    symbol: 'USDD',\n    date: tradeDate,\n    shares_bought: remainingCash\n  }\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2176,
        16
      ],
      "id": "26677c3b-c6da-4d1e-bf58-8f070161140b",
      "name": "Calculate Shares to Buy"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO daily_positions (symbol, date, shares_bought)\nVALUES ('{{ $json.symbol }}', '{{ $json.date }}', {{ $json.shares_bought }})\nON CONFLICT (symbol, date)\nDO UPDATE SET shares_bought = EXCLUDED.shares_bought, updated_at = CURRENT_TIMESTAMP;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        2400,
        16
      ],
      "id": "adcfd418-93bb-4ff2-b3a4-0932ed3cd0d7",
      "name": "Record Morning Buys",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "50a623a5-105d-4ad2-9f17-159b75782bb6",
              "name": "date",
              "value": "={{ $today.toFormat('yyyy-MM-dd') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1056,
        16
      ],
      "id": "5bf546dc-8e43-443d-a6d5-4d5d710e96f0",
      "name": "Set Date"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  '{{ $json.symbol }}' AS symbol,\n  {{ $json.allocation_usd }} AS allocation_usd,\n  dp.price_open\nFROM daily_prices dp\nWHERE dp.symbol = '{{ $json.symbol }}'\n  AND dp.date = '{{ $(\"Set Date\").item.json.date }}'::date;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1952,
        16
      ],
      "id": "78574bfa-0c96-4e73-9403-13c1a9df7590",
      "name": "Get Specified Date's Open Prices",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  dp_pos.symbol,\n  dp_pos.shares_bought,\n  dp_prices.price_open,\n  dp_prices.price_close\nFROM daily_positions dp_pos\nJOIN daily_prices dp_prices \n  ON dp_pos.symbol = dp_prices.symbol\n AND dp_pos.date = dp_prices.date\nWHERE dp_pos.date = '{{ $json.date }}'::date\n  AND dp_pos.shares_bought > 0;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1280,
        240
      ],
      "id": "2fc453d7-6a48-46b6-964c-999e617301b3",
      "name": "Get Today's Positions",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Use date passed from Set Date node\nconst tradeDate = $('Set Date1').first().json.date;\nlet totalCashFromSales = 0;\n\nconst results = items.map(item => {\n  const sharesSold = item.json.shares_bought;\n  const saleAmount = sharesSold * item.json.price_close;\n  totalCashFromSales += saleAmount;\n  \n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: tradeDate,\n      shares_sold: sharesSold,\n      shares_bought: 0\n    }\n  };\n});\n\n// Update USDD to reflect cash from sales\nresults.push({\n  json: {\n    symbol: 'USDD',\n    date: tradeDate,\n    shares_bought: totalCashFromSales,\n    shares_sold: 0\n  }\n});\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1504,
        240
      ],
      "id": "4c4e40ae-18fa-46e4-bbd2-1ce78b7c7c1d",
      "name": "Calculate End of Day Sales"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE daily_positions\nSET\n  shares_bought = CASE \n    WHEN '{{ $json.symbol }}' = 'USDD' THEN {{ $json.shares_bought }}\n    ELSE COALESCE({{ $json.shares_bought }}, daily_positions.shares_bought)\n  END,\n  shares_sold = COALESCE({{ $json.shares_sold }}, daily_positions.shares_sold),\n  updated_at = CURRENT_TIMESTAMP\nWHERE symbol = '{{ $json.symbol }}'\n  AND date = '{{ $json.date }}'::date;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1728,
        240
      ],
      "id": "c451f043-e293-4578-8f9b-fdebce63165a",
      "name": "Record End of Day",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "50a623a5-105d-4ad2-9f17-159b75782bb6",
              "name": "date",
              "value": "={{ $today.toFormat('yyyy-MM-dd') }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1056,
        240
      ],
      "id": "32323f0e-03fc-4ac5-a082-686ed63a13f3",
      "name": "Set Date1"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "Daily Open Executed",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        2624,
        16
      ],
      "id": "339ef01d-f5a5-48c7-9e61-7ca860be846e",
      "name": "Daily Open Message",
      "webhookId": "fa5ae79b-9616-47dc-901f-eaf40b1f1baa",
      "credentials": {
        "discordWebhookApi": {
          "id": "hXnySa96N3aNgiBT",
          "name": "Janus Errors Webhook"
        }
      }
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "Daily Close Executed",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1952,
        240
      ],
      "id": "ce645b3a-bfb6-4908-907d-7786e2ae4067",
      "name": "Daily Close Message",
      "webhookId": "fa5ae79b-9616-47dc-901f-eaf40b1f1baa",
      "credentials": {
        "discordWebhookApi": {
          "id": "hXnySa96N3aNgiBT",
          "name": "Janus Errors Webhook"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "4:05 PM Central - Market Close": {
      "main": [
        [
          {
            "node": "Set Date1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "9:35 AM Central - Market Open": {
      "main": [
        [
          {
            "node": "Set Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get USDD Cash Available": {
      "main": [
        [
          {
            "node": "Get Latest Conviction Scores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Latest Conviction Scores": {
      "main": [
        [
          {
            "node": "Calculate Position Sizes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Position Sizes": {
      "main": [
        [
          {
            "node": "Get Specified Date's Open Prices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Shares to Buy": {
      "main": [
        [
          {
            "node": "Record Morning Buys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Date": {
      "main": [
        [
          {
            "node": "Get USDD Cash Available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Specified Date's Open Prices": {
      "main": [
        [
          {
            "node": "Calculate Shares to Buy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Today's Positions": {
      "main": [
        [
          {
            "node": "Calculate End of Day Sales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate End of Day Sales": {
      "main": [
        [
          {
            "node": "Record End of Day",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Date1": {
      "main": [
        [
          {
            "node": "Get Today's Positions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Record Morning Buys": {
      "main": [
        [
          {
            "node": "Daily Open Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Record End of Day": {
      "main": [
        [
          {
            "node": "Daily Close Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "09c6069c-14a0-4a43-bb6b-4f7f0549c726",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f789c2c474c97ef5e4de040eeaabbf0c6fb8405fe1c6683d5ae6768188a5df19"
  },
  "id": "bavup0dBy4JEMs82",
  "tags": []
}