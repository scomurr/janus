{
  "name": "05b3 - Daily Strategy",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * 1-5"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [200, 200],
      "id": "daily-trigger-morning",
      "name": "9 AM Central - Market Open"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS daily_positions (\n  id SERIAL PRIMARY KEY,\n  symbol TEXT NOT NULL,\n  date DATE NOT NULL,\n  shares_bought DECIMAL(15,6) DEFAULT 0,\n  shares_sold DECIMAL(15,6) DEFAULT 0,\n  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n  UNIQUE(symbol, date)\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [400, 200],
      "id": "create-daily-positions-table",
      "name": "Create daily_positions Table",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  COALESCE(\n    (SELECT \n       COALESCE(shares_bought, 0) - COALESCE(shares_sold, 0) \n     FROM daily_positions \n     WHERE symbol = 'USDD' \n     ORDER BY date DESC, updated_at DESC \n     LIMIT 1), \n    1000.00\n  ) AS current_portfolio_value;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [600, 200],
      "id": "get-usdd-cash",
      "name": "Get USDD Cash Available",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT symbol, conviction\nFROM ticker_buys\nWHERE last_updated >= now() - interval '24 hours'\n  AND conviction > 0\nORDER BY symbol;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [800, 200],
      "id": "get-conviction-scores",
      "name": "Get Latest Conviction Scores",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const availableCash = $('Get USDD Cash Available').first().json.current_portfolio_value;\nconst tickers = $('Get Latest Conviction Scores').all();\n\n// Calculate total conviction (excluding USDD)\nconst totalConviction = tickers.reduce((sum, ticker) => {\n  return sum + ticker.json.conviction;\n}, 0);\n\nif (totalConviction === 0) {\n  return [];\n}\n\n// Calculate allocations\nreturn tickers.map(ticker => ({\n  json: {\n    symbol: ticker.json.symbol,\n    conviction: ticker.json.conviction,\n    allocation_usd: Math.round((ticker.json.conviction / totalConviction) * availableCash * 100) / 100\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 200],
      "id": "calculate-position-sizes",
      "name": "Calculate Position Sizes"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  '{{ $json.symbol }}' as symbol,\n  {{ $json.allocation_usd }} as allocation_usd,\n  dp.price_open\nFROM daily_prices dp\nWHERE dp.symbol = '{{ $json.symbol }}'\n  AND dp.date = (NOW() AT TIME ZONE 'America/Chicago')::DATE;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1200, 200],
      "id": "get-open-prices",
      "name": "Get Today's Open Prices",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const today = new Date().toISOString().split('T')[0];\nconst availableCash = $('Get USDD Cash Available').first().json.current_portfolio_value;\nlet totalSpent = 0;\n\nconst results = items.map(item => {\n  const shares = Math.floor(item.json.allocation_usd / item.json.price_open * 10000) / 10000;\n  const actualSpent = shares * item.json.price_open;\n  totalSpent += actualSpent;\n  \n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: today,\n      shares_bought: shares\n    }\n  };\n});\n\n// Add USDD record showing remaining cash (should be ~$0)\nconst remainingCash = availableCash - totalSpent;\nresults.push({\n  json: {\n    symbol: 'USDD',\n    date: today,\n    shares_bought: remainingCash\n  }\n});\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 200],
      "id": "calculate-shares-to-buy",
      "name": "Calculate Shares to Buy"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO daily_positions (symbol, date, shares_bought)\nVALUES ('{{ $json.symbol }}', '{{ $json.date }}', {{ $json.shares_bought }})\nON CONFLICT (symbol, date)\nDO UPDATE SET shares_bought = EXCLUDED.shares_bought, updated_at = CURRENT_TIMESTAMP;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1600, 200],
      "id": "record-morning-buys",
      "name": "Record Morning Buys",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 16 * * 1-5"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [200, 400],
      "id": "daily-trigger-close",
      "name": "4 PM Central - Market Close"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  dp_pos.symbol,\n  dp_pos.shares_bought,\n  dp_prices.price_open,\n  dp_prices.price_close\nFROM daily_positions dp_pos\nJOIN daily_prices dp_prices ON dp_pos.symbol = dp_prices.symbol\n  AND dp_pos.date = dp_prices.date\nWHERE dp_pos.date = (NOW() AT TIME ZONE 'America/Chicago')::DATE\n  AND dp_pos.shares_bought > 0;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [400, 400],
      "id": "get-todays-positions",
      "name": "Get Today's Positions",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const today = new Date().toISOString().split('T')[0];\nlet totalCashFromSales = 0;\n\nconst results = items.map(item => {\n  const sharesSold = item.json.shares_bought;\n  const saleAmount = sharesSold * item.json.price_close;\n  totalCashFromSales += saleAmount;\n  \n  return {\n    json: {\n      symbol: item.json.symbol,\n      date: today,\n      shares_sold: sharesSold,\n      shares_bought: 'NULL'\n    }\n  };\n});\n\n// Update USDD to reflect cash from sales (overwrite the ~$0 morning value)\nresults.push({\n  json: {\n    symbol: 'USDD',\n    date: today,\n    shares_bought: totalCashFromSales,\n    shares_sold: 'NULL'\n  }\n});\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 400],
      "id": "calculate-end-of-day",
      "name": "Calculate End of Day Sales"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO daily_positions (symbol, date, shares_bought, shares_sold)\nVALUES ('{{ $json.symbol }}', '{{ $json.date }}', {{ $json.shares_bought }}, {{ $json.shares_sold }})\nON CONFLICT (symbol, date)\nDO UPDATE SET \n  shares_bought = CASE \n    WHEN '{{ $json.symbol }}' = 'USDD' AND EXCLUDED.shares_bought IS NOT NULL THEN \n      COALESCE(daily_positions.shares_bought, 0) + EXCLUDED.shares_bought\n    ELSE COALESCE(EXCLUDED.shares_bought, daily_positions.shares_bought)\n  END,\n  shares_sold = COALESCE(EXCLUDED.shares_sold, daily_positions.shares_sold),\n  updated_at = CURRENT_TIMESTAMP;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [800, 400],
      "id": "record-end-of-day",
      "name": "Record End of Day",
      "credentials": {
        "postgres": {
          "id": "MI553DLfDKBYBMXy",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "9 AM Central - Market Open": {
      "main": [
        [
          {
            "node": "Create daily_positions Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create daily_positions Table": {
      "main": [
        [
          {
            "node": "Get USDD Cash Available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get USDD Cash Available": {
      "main": [
        [
          {
            "node": "Get Latest Conviction Scores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Latest Conviction Scores": {
      "main": [
        [
          {
            "node": "Calculate Position Sizes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Position Sizes": {
      "main": [
        [
          {
            "node": "Get Today's Open Prices",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Today's Open Prices": {
      "main": [
        [
          {
            "node": "Calculate Shares to Buy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Shares to Buy": {
      "main": [
        [
          {
            "node": "Record Morning Buys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4 PM Central - Market Close": {
      "main": [
        [
          {
            "node": "Get Today's Positions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Today's Positions": {
      "main": [
        [
          {
            "node": "Calculate End of Day Sales",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate End of Day Sales": {
      "main": [
        [
          {
            "node": "Record End of Day",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "daily-strategy-simplified",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f789c2c474c97ef5e4de040eeaabbf0c6fb8405fe1c6683d5ae6768188a5df19"
  },
  "id": "daily-strategy-simplified",
  "tags": []
}