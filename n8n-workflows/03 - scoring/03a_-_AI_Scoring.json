[{"createdAt":"2025-09-05T21:42:11.548Z","updatedAt":"2025-09-22T13:16:03.000Z","id":"I8I59cVdcaeZ34yd","name":"03a - AI Scoring","active":true,"isArchived":false,"nodes":[{"parameters":{"operation":"executeQuery","query":"select * FROM ticker_universe\nWHERE market_cap IS NOT NULL\n  AND market_cap > 0\n  AND market_cap < 300000000\n  AND total_revenue IS NOT NULL\n  AND total_revenue > 0\n  AND gross_margins IS NOT NULL\n  AND gross_margins > 0\n  AND volume > 10000\n  -- P/E ratio sanity\n  AND trailing_pe IS NOT NULL\n  AND trailing_pe > 0\n  AND trailing_pe < 100\n  -- Dividend sanity\n  AND (dividend_yield IS NULL OR dividend_yield < 50)\n  -- 52-week range sanity\n  AND fifty_two_week_high IS NOT NULL\n  AND fifty_two_week_low IS NOT NULL\n  AND fifty_two_week_high > 0\n  AND fifty_two_week_low > 0\n  AND (fifty_two_week_high / fifty_two_week_low) < 100\n  -- Revenue vs Market Cap sanity\n  AND total_revenue > market_cap * 0.01\n  -- Liquidity sanity\n  AND volume > (market_cap / 1000)\nORDER BY market_cap ASC;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-304,544],"id":"63d8979a-9654-4d13-930a-807de7888df6","name":"Execute a SQL query","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"promptType":"define","text":"=Analyze the following micro-cap company fundamentals and return JSON — no markdown, no code block, no backticks.\n\n{ \"symbol\": {{ $json.symbol }}, \"score\": 1–10, \"recommendation\": \"Buy\"|\"Hold\"|\"Sell\", \"reason\": \"...\" }\n\nData:\n {{ JSON.stringify($json) }}","hasOutputParser":true,"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[848,-176],"id":"ba05d6ef-54bf-4f08-8e88-8990e0f48b9c","name":"OpenAI","onError":"continueErrorOutput"},{"parameters":{"promptType":"define","text":"=Analyze the following micro-cap company fundamentals and return only a raw JSON object — no markdown, no explanation, no code block, no backticks.\n\nFormat:\n{ \"symbol\": {{ $json.symbol }}, \"score\": 1–10, \"recommendation\": \"Buy\"|\"Hold\"|\"Sell\", \"reason\": \"...\" }\n\nData:\n{{ JSON.stringify($json) }}\n","hasOutputParser":true,"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[848,432],"id":"273a05d0-4efd-4616-beb1-0a9cd70d2efd","name":"Gemini"},{"parameters":{"model":{"__rl":true,"value":"chatgpt-4o-latest","mode":"list","cachedResultName":"chatgpt-4o-latest"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[816,48],"id":"741c8d98-0ea2-4294-8cee-4595f905ae15","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"I0DCZcJtvzGQ1ryz","name":"OpenAi account"}}},{"parameters":{"modelName":"models/gemini-2.5-flash-lite","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatGoogleGemini","typeVersion":1,"position":[816,656],"id":"f13da6a8-cc0e-4d8a-bcff-6f9ccc361d28","name":"Google Gemini Chat Model","credentials":{"googlePalmApi":{"id":"R0mkXWsHfayYEtMG","name":"Google Gemini(PaLM) Api account"}}},{"parameters":{"operation":"executeQuery","query":"INSERT INTO ticker_scores (symbol, model, score, recommendation, reason, last_updated)\nVALUES (\n  '{{ $json.symbol }}',\n  '{{ $json.model }}',\n  {{ $json.score }},\n  '{{ $json.recommendation.replace(/'/g, \"''\") }}',\n  '{{ $json.reason.replace(/'/g, \"''\") }}',\n  CURRENT_TIMESTAMP\n)\nON CONFLICT (symbol, model) DO UPDATE\nSET\n  score = EXCLUDED.score,\n  recommendation = EXCLUDED.recommendation,\n  reason = EXCLUDED.reason,\n  last_updated = CURRENT_TIMESTAMP;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[1808,336],"id":"db7671ff-88d5-49a5-82bb-0e6716be351c","name":"Insert into Ticker Scores","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"promptType":"define","text":"=Analyze the following micro-cap company fundamentals and return only a raw JSON object in the following format. Keep the reason 2-3 sentences max. Provide no other text other than what is placed in the JSON. No markdown, no code block, no backticks. Ensure the JSON is not malformed.\n\nFormat:\n{ \"symbol\": {{ $json.symbol }}, \"score\": 1–10, \"recommendation\": \"Buy\"|\"Hold\"|\"Sell\", \"reason\": \"...\" }\n\nData:\n{{ JSON.stringify($json) }}\n","hasOutputParser":true,"batching":{}},"type":"@n8n/n8n-nodes-langchain.chainLlm","typeVersion":1.7,"position":[1344,1040],"id":"c203e50e-92ba-4261-ac09-654beee1dc1e","name":"Basic LLM Chain"},{"parameters":{"model":"llama3:latest","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[1312,1264],"id":"d741a428-3cd7-4360-9634-1aefd3dbb845","name":"Ollama Chat Model","credentials":{"ollamaApi":{"id":"4K9PdbSii5iKOqMf","name":"Ollama account"}}},{"parameters":{"content":"The LLM are supposed to return buy/hold/sell. Buy means analyze depeeper. Hold means (if we're in a position) to hold, and sell means skip for now."},"type":"n8n-nodes-base.stickyNote","position":[-64,-400],"typeVersion":1,"id":"9de472e6-25f9-466b-8198-4135e96ab7ce","name":"Sticky Note"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const index = $itemIndex;\nconst symbol = $items('Execute a SQL query', 0)[index].json.symbol;\n\nlet raw = $json.text.trim();\n\nconst output = {\n  symbol,\n  model: 'openai'\n};\n\ntry {\n  const match = raw.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n  if (match) raw = match[1].trim();\n  if (!raw.endsWith('}')) raw += '}';\n\n  const parsed = JSON.parse(raw);\n  output.score = parsed.score;\n  output.recommendation = parsed.recommendation;\n  output.reason = parsed.reason;\n} catch (err) {\n  output.score = null;\n  output.recommendation = 'Error';\n  output.reason = 'failed to process';\n}\n\nreturn { json: output };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1456,32],"id":"1fbba7f4-2c7a-4b46-a3a9-18a951ceb49e","name":"Parse OpenAI Response"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const index = $itemIndex;\nconst symbol = $items('Execute a SQL query', 0)[index].json.symbol;\n\nlet raw = $json.text.trim();\n\nconst output = {\n  symbol,\n  model: 'gemini'\n};\n\ntry {\n  const match = raw.match(/```json\\s*([\\s\\S]*?)\\s*```/);\n  if (match) raw = match[1].trim();\n  if (!raw.endsWith('}')) raw += '}';\n\n  const parsed = JSON.parse(raw);\n  output.score = parsed.score;\n  output.recommendation = parsed.recommendation;\n  output.reason = parsed.reason;\n} catch (err) {\n  output.score = null;\n  output.recommendation = 'Error';\n  output.reason = 'failed to process';\n}\n\nreturn { json: output };\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1456,640],"id":"be56d9b3-9b41-4664-8ce9-db3140c45ac1","name":"Parse Gemini Response"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const cleanReason = $json.output.reason?.replace(/'/g, \"''\") || null;\n\nreturn {\n  json: {\n    ...$json,\n    model: \"llama3\",\n    cleanReason: cleanReason\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1808,1040],"id":"02b281e1-64b9-4527-958b-375a607fb0cb","name":"Parse Llama3 Response"},{"parameters":{"rule":{"interval":[{"field":"weeks","triggerAtHour":8}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-752,448],"id":"1713ae51-a670-4652-beb6-9ee97269609b","name":"Sunday 8AM"},{"parameters":{},"type":"n8n-nodes-base.errorTrigger","typeVersion":1,"position":[-752,1696],"id":"151f478d-f274-4a86-a865-9780300e7ca5","name":"Error Trigger"},{"parameters":{"authentication":"webhook","content":"=Error:  {{ $json.execution.error.message }}\nWorkflow: {{ $workflow.name }}\nCheck N8N","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[-528,1696],"id":"1a668242-4ef3-4240-9705-04fbb9f079f3","name":"Discord","webhookId":"ca20c902-d9f2-42e0-903e-8403d43611f1","credentials":{"discordWebhookApi":{"id":"hXnySa96N3aNgiBT","name":"Janus Errors Webhook"}}},{"parameters":{"authentication":"webhook","content":"=Workflow started:  {{ $workflow.name }}","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[-528,352],"id":"8a2be824-b874-4993-befc-adeaa10969a2","name":"Workflow Started","webhookId":"5b37bb24-5ed2-4ff8-8a78-2c4d0cb7cb5d","credentials":{"discordWebhookApi":{"id":"hXnySa96N3aNgiBT","name":"Janus Errors Webhook"}}},{"parameters":{"authentication":"webhook","content":"=Workflow ended:  {{ $workflow.name }}","options":{}},"type":"n8n-nodes-base.discord","typeVersion":2,"position":[2256,544],"id":"26e5ec7a-c80a-4769-a08b-a2f409c11328","name":"Workflow Complete","webhookId":"5b37bb24-5ed2-4ff8-8a78-2c4d0cb7cb5d","credentials":{"discordWebhookApi":{"id":"hXnySa96N3aNgiBT","name":"Janus Errors Webhook"}}},{"parameters":{"operation":"executeQuery","query":"select * FROM ticker_universe\nWHERE market_cap IS NOT NULL\n  AND market_cap > 0\n  AND market_cap < 300000000\n  AND total_revenue IS NOT NULL\n  AND total_revenue > 0\n  AND gross_margins IS NOT NULL\n  AND gross_margins > 0\n  AND volume > 10000\n  -- P/E ratio sanity\n  AND trailing_pe IS NOT NULL\n  AND trailing_pe > 0\n  AND trailing_pe < 100\n  -- Dividend sanity\n  AND (dividend_yield IS NULL OR dividend_yield < 50)\n  -- 52-week range sanity\n  AND fifty_two_week_high IS NOT NULL\n  AND fifty_two_week_low IS NOT NULL\n  AND fifty_two_week_high > 0\n  AND fifty_two_week_low > 0\n  AND (fifty_two_week_high / fifty_two_week_low) < 100\n  -- Revenue vs Market Cap sanity\n  AND total_revenue > market_cap * 0.01\n  -- Liquidity sanity\n  AND volume > (market_cap / 1000)\nORDER BY market_cap ASC;","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[-528,1472],"id":"de4a35e5-d89d-4fd6-a6aa-b6f7f0f731cf","name":"Execute a SQL query1","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-752,1472],"id":"94aff41d-4703-491f-a2e8-a431a515f960","name":"When clicking ‘Execute workflow’"},{"parameters":{"jsonSchemaExample":"{ \"symbol\": \"MSFT\",\"score\": 5,\"recommendation\":\"Buy\",\"reason\":\"Strong Financials\"}","autoFix":true},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.3,"position":[1440,1264],"id":"364432f8-d5f9-4a6c-a7e9-1b62142fdc4a","name":"Structured Output Parser"},{"parameters":{"model":"mistral:7b","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[1520,1472],"id":"959ea91f-923f-4038-a20b-4ab4fc900189","name":"Ollama Chat Model1","credentials":{"ollamaApi":{"id":"4K9PdbSii5iKOqMf","name":"Ollama account"}}},{"parameters":{"operation":"executeQuery","query":"INSERT INTO ticker_scores (symbol, model, score, recommendation, reason, last_updated,date)\nVALUES (\n  '{{ $json.output.symbol }}',\n  '{{ $json.model }}',\n  {{ $json.output.score }},\n  '{{ $json.output.recommendation }}',\n  '{{ $json.cleanReason }}',\n  CURRENT_TIMESTAMP,\n  '{{ $('Set Dates').item.json.nextMonday }}'\n)\nON CONFLICT (symbol, model) DO UPDATE\nSET\n  score = EXCLUDED.score,\n  recommendation = EXCLUDED.recommendation,\n  reason = EXCLUDED.reason,\n  last_updated = CURRENT_TIMESTAMP,\n  date = '{{ $('Set Dates').item.json.nextMonday }}';\n","options":{"queryBatching":"single"}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[2032,1040],"id":"13605e33-75d0-4f53-b65d-13175452650e","name":"Insert into Ticker Scores1","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"assignments":{"assignments":[{"id":"586de83c-c024-406a-a8b2-fee66191edeb","name":"nextMonday","value":"={{ $now.plus({ days: ((8 - $now.weekday) % 7) || 7 }).toFormat(\"yyyy-MM-dd\") }}","type":"string"},{"id":"ea7ccc33-e3e3-4062-a486-c2b42148c86e","name":"today","value":"={{ $now.toFormat(\"yyyy-MM-dd\") }}","type":"string"},{"id":"0cca7e10-3610-45d9-b024-7afeacb50a08","name":"limit","value":250,"type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-528,544],"id":"ba96f2c7-8a4a-4752-ab49-1ecd20d584b7","name":"Set Dates"},{"parameters":{"maxItems":"={{ $('Set Dates').item.json.limit }}"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[144,32],"id":"4aac7196-cd14-43ef-ab7e-bf55d42adfcf","name":"Limit"},{"parameters":{"operation":"executeQuery","query":"SELECT CASE \n         WHEN EXISTS (\n           SELECT 1 \n           FROM ticker_scores t\n           WHERE t.date = '{{ $('Set Dates').item.json.nextMonday }}'\n             AND t.symbol = '{{ $('Execute a SQL query').item.json.symbol }}'\n             AND t.model = '{{ $('Set Model OpenAI').item.json.model }}'\n         )\n         THEN json_build_object(\n                'proceed', false,\n                'symbol', '{{ $('Execute a SQL query').item.json.symbol }}',\n                'model', '{{ $('Set Model OpenAI').item.json.model }}'\n              )\n         ELSE json_build_object(\n                'proceed', true,\n                'symbol', '{{ $('Execute a SQL query').item.json.symbol }}',\n                'model', '{{ $('Set Model OpenAI').item.json.model }}'\n              )\n       END;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[368,32],"id":"dc8d239c-90b4-46b4-97bc-0f3bd9628a8a","name":"Check Processed","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e1e6d512-717b-4565-a6f0-41180f32281b","leftValue":"={{ $json.json_build_object.proceed }}","rightValue":"true","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[592,32],"id":"cda927a3-751e-4117-b0c2-8079c6e29417","name":"Proceed if Not Processed"},{"parameters":{"maxItems":"={{ $('Set Dates').item.json.limit }}"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[144,640],"id":"80fe858e-4ad7-45aa-8f95-5d07a1848159","name":"Limit1"},{"parameters":{"operation":"executeQuery","query":"SELECT CASE \n         WHEN EXISTS (\n           SELECT 1 \n           FROM ticker_scores t\n           WHERE t.date = '{{ $('Set Dates').item.json.nextMonday }}'\n             AND t.symbol = '{{ $('Execute a SQL query').item.json.symbol }}'\n             AND t.model = '{{ $('Set Model Gemini').item.json.model }}'\n         )\n         THEN json_build_object(\n                'proceed', false,\n                'symbol', '{{ $('Execute a SQL query').item.json.symbol }}',\n                'model', '{{ $('Set Model Gemini').item.json.model }}'\n              )\n         ELSE json_build_object(\n                'proceed', true,\n                'symbol', '{{ $('Execute a SQL query').item.json.symbol }}',\n                'model', '{{ $('Set Model Gemini').item.json.model }}'\n              )\n       END;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[368,640],"id":"bed892ff-73cf-4ddb-b918-484e64923461","name":"Check Processed1","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e1e6d512-717b-4565-a6f0-41180f32281b","leftValue":"={{ $json.json_build_object.proceed }}","rightValue":"true","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[592,640],"id":"da234a02-35f4-4ad5-a395-9874339c6c48","name":"Proceed if Not Processed1"},{"parameters":{"maxItems":"={{ $('Set Dates').item.json.limit }}"},"type":"n8n-nodes-base.limit","typeVersion":1,"position":[144,1040],"id":"7a794f95-0d9a-4815-83f1-49cfa1706376","name":"Limit2"},{"parameters":{"operation":"executeQuery","query":"SELECT CASE \n         WHEN EXISTS (\n           SELECT 1 \n           FROM ticker_scores t\n           WHERE t.date = '{{ $('Set Dates').item.json.nextMonday }}'\n             AND t.symbol = '{{ $('Execute a SQL query').item.json.symbol }}'\n             AND t.model = '{{ $('Set Model Llama3').item.json.Model }}'\n         )\n         THEN json_build_object(\n                'proceed', false,\n                'symbol', '{{ $('Execute a SQL query').item.json.symbol }}',\n                'model', '{{ $('Set Model Llama3').item.json.Model }}'\n              )\n         ELSE json_build_object(\n                'proceed', true,\n                'symbol', '{{ $('Execute a SQL query').item.json.symbol }}',\n                'model', '{{ $('Set Model Llama3').item.json.Model }}'\n              )\n       END;\n","options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[368,1040],"id":"b5cd114f-feb7-4440-86b9-31688b94b065","name":"Check Processed2","credentials":{"postgres":{"id":"MI553DLfDKBYBMXy","name":"Postgres account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"e1e6d512-717b-4565-a6f0-41180f32281b","leftValue":"={{ $json.json_build_object.proceed }}","rightValue":"true","operator":{"type":"boolean","operation":"true","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[592,1040],"id":"8bce5447-a705-463a-be48-88aa81347569","name":"Proceed if Not Processed2"},{"parameters":{"assignments":{"assignments":[{"id":"e9059196-be2a-4e7a-bbc3-a0315c45f256","name":"Model","value":"llama3","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-80,1040],"id":"58c19480-986e-4c41-8841-6a935cb5c4b1","name":"Set Model Llama3"},{"parameters":{"assignments":{"assignments":[{"id":"ffeb05f5-f7f2-4060-b793-d2526b49709e","name":"model","value":"openai","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-80,32],"id":"2f340668-daeb-40d7-8a1e-a2851c912cdf","name":"Set Model OpenAI"},{"parameters":{"jsonSchemaExample":"{ \"symbol\": \"MSFT\",\"score\": 5,\"recommendation\":\"Buy\",\"reason\":\"Strong Financials\"}","autoFix":true},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.3,"position":[944,656],"id":"860d06c4-8d93-4674-90c6-8c5ca0d24b1a","name":"Structured Output Parser1"},{"parameters":{"model":"llama3:latest","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[1024,864],"id":"77a32a5e-9b04-48e3-a1b0-0864948995c7","name":"Ollama Chat Model2","credentials":{"ollamaApi":{"id":"4K9PdbSii5iKOqMf","name":"Ollama account"}}},{"parameters":{"jsonSchemaExample":"{ \"symbol\": \"MSFT\",\"score\": 5,\"recommendation\":\"Buy\",\"reason\":\"Strong Financials\"}","autoFix":true},"type":"@n8n/n8n-nodes-langchain.outputParserStructured","typeVersion":1.3,"position":[944,48],"id":"dc39107f-283a-481e-97b7-c73a0605fd5e","name":"Structured Output Parser2"},{"parameters":{"model":"llama3:latest","options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOllama","typeVersion":1,"position":[1024,256],"id":"65b4434f-2946-4237-99d0-8a151e016640","name":"Ollama Chat Model3","credentials":{"ollamaApi":{"id":"4K9PdbSii5iKOqMf","name":"Ollama account"}}},{"parameters":{"mode":"runOnceForEachItem","jsCode":"let asdf = $('Execute a SQL query').item.json.symbol;\nconsole.log(asdf);\n\nreturn $input.item;"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[960,1040],"id":"e7c1fa02-a42e-45c1-bef2-b53af20c843b","name":"Code"},{"parameters":{"assignments":{"assignments":[{"id":"df58e7da-8ddc-4f1f-882d-2b548e824cb6","name":"model","value":"gemini","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-80,640],"id":"361a6e4a-f61c-4b21-8514-40616747f2e1","name":"Set Model Gemini"}],"connections":{"Execute a SQL query":{"main":[[{"node":"Set Model Llama3","type":"main","index":0},{"node":"Set Model Gemini","type":"main","index":0},{"node":"Set Model OpenAI","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"OpenAI","type":"ai_languageModel","index":0}]]},"Google Gemini Chat Model":{"ai_languageModel":[[{"node":"Gemini","type":"ai_languageModel","index":0}]]},"OpenAI":{"main":[[{"node":"Parse OpenAI Response","type":"main","index":0}],[]]},"Ollama Chat Model":{"ai_languageModel":[[{"node":"Basic LLM Chain","type":"ai_languageModel","index":0}]]},"Gemini":{"main":[[{"node":"Parse Gemini Response","type":"main","index":0}]]},"Basic LLM Chain":{"main":[[{"node":"Parse Llama3 Response","type":"main","index":0}]]},"Parse OpenAI Response":{"main":[[{"node":"Insert into Ticker Scores","type":"main","index":0}]]},"Parse Gemini Response":{"main":[[{"node":"Insert into Ticker Scores","type":"main","index":0}]]},"Parse Llama3 Response":{"main":[[{"node":"Insert into Ticker Scores1","type":"main","index":0}]]},"Sunday 8AM":{"main":[[{"node":"Workflow Started","type":"main","index":0},{"node":"Set Dates","type":"main","index":0}]]},"Error Trigger":{"main":[[{"node":"Discord","type":"main","index":0}]]},"Insert into Ticker Scores":{"main":[[{"node":"Workflow Complete","type":"main","index":0}]]},"Execute a SQL query1":{"main":[[]]},"When clicking ‘Execute workflow’":{"main":[[{"node":"Execute a SQL query1","type":"main","index":0}]]},"Structured Output Parser":{"ai_outputParser":[[{"node":"Basic LLM Chain","type":"ai_outputParser","index":0}]]},"Ollama Chat Model1":{"ai_languageModel":[[{"node":"Structured Output Parser","type":"ai_languageModel","index":0}]]},"Insert into Ticker Scores1":{"main":[[{"node":"Workflow Complete","type":"main","index":0}]]},"Set Dates":{"main":[[{"node":"Execute a SQL query","type":"main","index":0}]]},"Limit":{"main":[[{"node":"Check Processed","type":"main","index":0}]]},"Check Processed":{"main":[[{"node":"Proceed if Not Processed","type":"main","index":0}]]},"Proceed if Not Processed":{"main":[[{"node":"OpenAI","type":"main","index":0}]]},"Limit1":{"main":[[{"node":"Check Processed1","type":"main","index":0}]]},"Check Processed1":{"main":[[{"node":"Proceed if Not Processed1","type":"main","index":0}]]},"Proceed if Not Processed1":{"main":[[{"node":"Gemini","type":"main","index":0}]]},"Limit2":{"main":[[{"node":"Check Processed2","type":"main","index":0}]]},"Check Processed2":{"main":[[{"node":"Proceed if Not Processed2","type":"main","index":0}]]},"Proceed if Not Processed2":{"main":[[{"node":"Code","type":"main","index":0}]]},"Set Model Llama3":{"main":[[{"node":"Limit2","type":"main","index":0}]]},"Set Model OpenAI":{"main":[[{"node":"Limit","type":"main","index":0}]]},"Structured Output Parser1":{"ai_outputParser":[[{"node":"Gemini","type":"ai_outputParser","index":0}]]},"Ollama Chat Model2":{"ai_languageModel":[[{"node":"Structured Output Parser1","type":"ai_languageModel","index":0}]]},"Structured Output Parser2":{"ai_outputParser":[[{"node":"OpenAI","type":"ai_outputParser","index":0}]]},"Ollama Chat Model3":{"ai_languageModel":[[{"node":"Structured Output Parser2","type":"ai_languageModel","index":0}]]},"Code":{"main":[[{"node":"Basic LLM Chain","type":"main","index":0}]]},"Set Model Gemini":{"main":[[{"node":"Limit1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Sunday 8AM":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"e6e68d96-c424-45fe-8194-9c6e187814b1","triggerCount":1,"tags":[{"createdAt":"2025-09-04T15:23:38.975Z","updatedAt":"2025-09-04T15:23:38.975Z","id":"yQaAGmyd3yVCL790","name":"janus"}],"shared":[{"createdAt":"2025-09-05T21:42:11.558Z","updatedAt":"2025-09-05T21:42:11.558Z","role":"workflow:owner","workflowId":"I8I59cVdcaeZ34yd","projectId":"33RSXH6V1FUTQaMQ","project":{"createdAt":"2025-08-29T14:57:46.722Z","updatedAt":"2025-08-29T15:00:17.904Z","id":"33RSXH6V1FUTQaMQ","name":"Scott Murray <scomurr@scomurr.com>","type":"personal","icon":null,"description":null}}]}]